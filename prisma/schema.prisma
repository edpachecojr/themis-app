generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Organization  Organization[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @unique
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Contact {
  id             String       @id
  name           String
  email          String?
  zipCode        String?
  address        String?
  neighborhood   String?
  city           String?
  state          String?
  number         String?
  complement     String?
  dateOfBirth    DateTime?
  createdAt      DateTime     @default(now())
  createdBy      String?
  updatedBy      String?
  updatedAt      DateTime?
  phoneNumber    String
  sex            Gender
  deletedAt      DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String             @id
  name        String
  description String?
  status      OrganizationStatus @default(ACTIVE)
  owner       String
  createdAt   DateTime           @default(now())
  createdBy   String?
  updatedAt   DateTime           @updatedAt
  updatedBy   String?
  deletedAt   DateTime?
  user        User               @relation(fields: [owner], references: [id], onDelete: Cascade)
  contacts    Contact[]
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
}

// ============================================================================
// NEW MODELS FOR DEMAND/PROTOCOL + QUEUE + SLA + WORKFLOW DOMAIN
// ============================================================================
// Note: Contact and Organization models already exist in this schema

model Demand {
  id              String       @id @db.Uuid
  protocolNumber  String // Sequential protocol number per organization
  title           String
  description     String?
  contactId       String?      @db.Uuid // References existing Contact model (scalar FK only)
  organizationId  String       @db.Uuid // References existing Organization model (scalar FK only)
  queueId         String       @db.Uuid
  status          DemandStatus @default(NEW)
  priority        Priority     @default(MEDIUM)
  assignedToId    String?      @db.Uuid // References existing User model (scalar FK only)
  slaStartAt      DateTime
  slaDueAt        DateTime
  slaBreachedAt   DateTime?
  slaState        SLAState     @default(ON_TRACK)
  resolutionNotes String?
  closedAt        DateTime?
  createdById     String       @db.Uuid // References existing User model (scalar FK only)
  updatedById     String?      @db.Uuid // References existing User model (scalar FK only)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime? // Soft delete

  // Relations to models in this schema
  queue         Queue           @relation(fields: [queueId], references: [id])
  assignments   Assignment[]
  statusHistory StatusHistory[]
  comments      Comment[]
  attachments   Attachment[]
  demandTags    DemandTag[]

  @@unique([organizationId, protocolNumber])
  @@index([organizationId, status])
  @@index([organizationId, assignedToId])
  @@index([organizationId, slaDueAt])
  @@index([organizationId, createdAt])
  @@map("demand")
}

model Queue {
  id             String   @id @db.Uuid
  name           String
  description    String?
  defaultSlaId   String?  @db.Uuid
  organizationId String   @db.Uuid // References existing Organization model (scalar FK only)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations to models in this schema
  demands          Demand[]
  escalationRules  EscalationRule[] @relation("QueueEscalationRules")
  escalatedToQueue EscalationRule[] @relation("EscalationTargetQueue")
  defaultSla       SLAPlan?         @relation("QueueDefaultSLA", fields: [defaultSlaId], references: [id])

  @@map("queue")
}

model SLAPlan {
  id                    String   @id @db.Uuid
  name                  String
  responseTimeMinutes   Int // Time to first response
  resolutionTimeMinutes Int // Time to resolution
  businessHours         Json? // JSON object with business hours configuration
  organizationId        String   @db.Uuid // References existing Organization model (scalar FK only)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations to models in this schema
  queues Queue[] @relation("QueueDefaultSLA")

  @@map("sla_plan")
}

model Assignment {
  id           String    @id @db.Uuid
  demandId     String    @db.Uuid
  assignedToId String    @db.Uuid // References existing User model (scalar FK only)
  assignedById String    @db.Uuid // References existing User model (scalar FK only)
  assignedAt   DateTime  @default(now())
  unassignedAt DateTime?
  reason       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations to models in this schema
  demand Demand @relation(fields: [demandId], references: [id])

  @@map("assignment")
}

model StatusHistory {
  id          String       @id @db.Uuid
  demandId    String       @db.Uuid
  fromStatus  DemandStatus
  toStatus    DemandStatus
  changedById String       @db.Uuid // References existing User model (scalar FK only)
  changedAt   DateTime     @default(now())
  note        String?

  // Relations to models in this schema
  demand Demand @relation(fields: [demandId], references: [id])

  @@map("status_history")
}

model Comment {
  id         String    @id @db.Uuid
  demandId   String    @db.Uuid
  authorId   String    @db.Uuid // References existing User model (scalar FK only)
  body       String
  isInternal Boolean   @default(false)
  createdAt  DateTime  @default(now())
  deletedAt  DateTime? // Soft delete

  // Relations to models in this schema
  demand Demand @relation(fields: [demandId], references: [id])

  @@map("comment")
}

model Attachment {
  id           String    @id @db.Uuid
  demandId     String    @db.Uuid
  filename     String
  url          String
  uploadedById String    @db.Uuid // References existing User model (scalar FK only)
  uploadedAt   DateTime  @default(now())
  size         Int // File size in bytes
  deletedAt    DateTime? // Soft delete

  // Relations to models in this schema
  demand Demand @relation(fields: [demandId], references: [id])

  @@map("attachment")
}

model Tag {
  id             String   @id @db.Uuid
  name           String
  color          String? // Hex color code
  organizationId String   @db.Uuid // References existing Organization model (scalar FK only)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations to models in this schema
  demandTags DemandTag[]

  @@unique([organizationId, name])
  @@map("tag")
}

model DemandTag {
  id        String   @id @db.Uuid
  demandId  String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())

  // Relations to models in this schema
  demand Demand @relation(fields: [demandId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([demandId, tagId])
  @@map("demand_tag")
}

model EscalationRule {
  id               String   @id @db.Uuid
  queueId          String   @db.Uuid
  thresholdMinutes Int // Minutes after which escalation triggers
  action           String // Escalation action type
  targetUserId     String?  @db.Uuid // References existing User model (scalar FK only)
  targetQueueId    String?  @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations to models in this schema
  queue       Queue  @relation("QueueEscalationRules", fields: [queueId], references: [id])
  targetQueue Queue? @relation("EscalationTargetQueue", fields: [targetQueueId], references: [id])

  @@map("escalation_rule")
}

// Enums for the new domain
enum DemandStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
  CANCELED
  ESCALATED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SLAState {
  ON_TRACK
  AT_RISK
  BREACHED
}
