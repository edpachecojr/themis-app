generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Organization  Organization[]
  accounts      Account[]
  sessions      Session[]
  demands       Demand[]
  demandNotes   DemandNote[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @unique
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Contact {
  id             String       @id
  name           String
  email          String?
  zipCode        String?
  address        String?
  neighborhood   String?
  city           String?
  state          String?
  number         String?
  complement     String?
  dateOfBirth    DateTime?
  createdAt      DateTime     @default(now())
  createdBy      String?
  updatedBy      String?
  updatedAt      DateTime?
  phoneNumber    String
  sex            Gender
  deletedAt      DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  demands        Demand[]
  
  // Campos específicos para CRM Parlamentar
  cpf            String?      // CPF do cidadão
  rg             String?      // RG do cidadão
  voterId        String?      // Título de Eleitor
  maritalStatus  MaritalStatus? // Estado civil
  occupation     String?      // Profissão/Ocupação
  education      EducationLevel? // Nível de educação
  income         String?      // Faixa de renda
  politicalParty String?      // Partido político (se filiado)
  isVoter        Boolean      @default(true) // É eleitor ativo
  votingZone     String?      // Zona eleitoral
  votingSection  String?      // Seção eleitoral
  
  // Informações de contato adicionais
  whatsapp       String?      // Número do WhatsApp
  instagram      String?      // Usuário do Instagram
  facebook       String?      // Usuário do Facebook
  linkedin       String?      // Perfil do LinkedIn
  
  // Informações familiares
  spouseName     String?      // Nome do cônjuge
  childrenCount  Int?         // Número de filhos
  dependents     Int?         // Número de dependentes
  
  // Informações de interesse político
  politicalInterests String[]  // Interesses políticos (tags)
  votingHistory     String[]   // Histórico de votações importantes
  participationLevel ParticipationLevel? // Nível de participação política
  
  // Campos de segmentação
  ageGroup       AgeGroup?    // Faixa etária
  socialClass    SocialClass? // Classe social
  urbanRural     UrbanRural?  // Área urbana/rural
  
  // Índices para performance
  @@index([organizationId, cpf])
  @@index([organizationId, voterId])
  @@index([organizationId, city, state])
  @@index([organizationId, politicalParty])
}

model Organization {
  id          String             @id
  name        String
  description String?
  status      OrganizationStatus @default(ACTIVE)
  owner       String
  createdAt   DateTime           @default(now())
  createdBy   String?
  updatedAt   DateTime           @updatedAt
  updatedBy   String?
  deletedAt   DateTime?
  user        User               @relation(fields: [owner], references: [id], onDelete: Cascade)
  contacts    Contact[]
  demands     Demand[]
  demandNotes DemandNote[]
  demandTags  DemandTag[]
  
  // Unidades organizacionais
  offices     Office[]
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
}

// Novos enums para CRM Parlamentar
enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  CIVIL_UNION
}

enum EducationLevel {
  ILLITERATE
  INCOMPLETE_ELEMENTARY
  COMPLETE_ELEMENTARY
  INCOMPLETE_HIGH_SCHOOL
  COMPLETE_HIGH_SCHOOL
  INCOMPLETE_COLLEGE
  COMPLETE_COLLEGE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum ParticipationLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum AgeGroup {
  UNDER_18
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_55
  AGE_56_65
  OVER_65
}

enum SocialClass {
  CLASS_A
  CLASS_B
  CLASS_C
  CLASS_D
  CLASS_E
}

enum UrbanRural {
  URBAN
  RURAL
  PERIURBAN
}

// Modelo Demand MVP com multitenancy
model Demand {
  id              String          @id
  protocolNumber  String
  title           String
  description     String?
  contactId       String?
  organizationId  String
  status          DemandStatus    @default(NEW)
  priority        Priority        @default(MEDIUM)
  createdById     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relacionamentos
  contact         Contact?        @relation(fields: [contactId], references: [id])
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User           @relation(fields: [createdById], references: [id])
  
  // Relacionamentos opcionais para MVP
  notes           DemandNote[]
  tags            DemandTag[]
  
  // Unidade responsável pela demanda
  officeId        String?
  office          Office?        @relation(fields: [officeId], references: [id])

  @@unique([organizationId, protocolNumber])
}

// Modelos relacionados para Demand com multitenancy
model DemandNote {
  id             String   @id
  content        String
  demandId       String
  organizationId String
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  demand         Demand       @relation(fields: [demandId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User         @relation(fields: [createdById], references: [id])
}

model DemandTag {
  id             String   @id
  name           String
  color          String?  // Cor em formato hex (#FF0000)
  demandId       String
  organizationId String
  createdAt      DateTime @default(now())
  
  demand         Demand       @relation(fields: [demandId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, demandId, name])
}

// Enums necessários para Demand
enum DemandStatus {
  NEW
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ========================================
// MODELO OFFICE GENÉRICO
// ========================================

// Office - Modelo genérico para unidades organizacionais
model Office {
  id          String      @id
  name        String      // Nome da unidade (ex: "Gabinete Principal", "Consultório Cardiologia")
  code        String      // Código único da unidade
  description String?     // Descrição da unidade
  type        OfficeType  // Tipo da unidade
  status      OfficeStatus @default(ACTIVE)
  
  // Localização
  address     String?     // Endereço completo
  city        String?     // Cidade
  state       String?     // Estado
  zipCode     String?     // CEP
  neighborhood String?    // Bairro
  complement  String?     // Complemento
  
  // Contato
  phone       String?     // Telefone
  email       String?     // Email
  whatsapp    String?     // WhatsApp
  
  // Configurações específicas por tipo
  capacity    Int?        // Capacidade (leitos, consultórios, etc.)
  maxUsers    Int         @default(10) // Máximo de usuários na unidade
  
  // Horário de funcionamento
  openingHours String?    // Horário de funcionamento
  isOpenOnWeekends Boolean @default(false)
  
  // Metadados específicos (JSON para flexibilidade)
  metadata    Json?       // Dados específicos por tipo de unidade
  
  // Timestamps
  createdAt   DateTime    @default(now())
  createdBy   String?
  updatedAt   DateTime    @updatedAt
  updatedBy   String?
  deletedAt   DateTime?
  
  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Usuários da unidade
  officeUsers OfficeUser[]
  
  // Demandas atribuídas à unidade
  demands     Demand[]
  
  // Índices
  @@unique([organizationId, code])
  @@index([organizationId, type])
  @@index([organizationId, status])
  @@index([organizationId, city, state])
  @@map("office")
}

// Relacionamento Usuário-Unidade com permissões
model OfficeUser {
  id          String      @id
  userId      String      // ID do usuário
  officeId    String      // ID da unidade
  
  // Permissões na unidade
  role        OfficeRole  @default(STAFF)
  permissions String[]    // Permissões específicas
  isActive    Boolean     @default(true)
  
  // Datas de acesso
  accessStartDate DateTime @default(now())
  accessEndDate   DateTime? // Data de término do acesso
  
  // Timestamps
  createdAt   DateTime    @default(now())
  createdBy   String?
  updatedAt   DateTime    @updatedAt
  updatedBy   String?
  
  // Relacionamentos
  office      Office      @relation(fields: [officeId], references: [id], onDelete: Cascade)
  
  // Índices
  @@unique([userId, officeId])
  @@index([officeId, role])
  @@index([userId, isActive])
  @@map("office_user")
}

// ========================================
// ENUMS PARA OFFICE
// ========================================

enum OfficeType {
  // Tipos para Gabinetes Parlamentares
  MAIN_OFFICE        // Gabinete principal
  REGIONAL_OFFICE    // Escritório regional
  SERVICE_CENTER     // Centro de atendimento
  SPECIALIZED_UNIT   // Unidade especializada
  
  // Tipos para Clínicas
  CONSULTATION_ROOM  // Consultório
  EMERGENCY_ROOM     // Sala de emergência
  WARD              // Enfermaria
  SURGERY_ROOM      // Sala de cirurgia
  LABORATORY        // Laboratório
  IMAGING_CENTER    // Centro de imagem
}

enum OfficeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  MAINTENANCE
}

enum OfficeRole {
  ADMIN           // Administrador da unidade
  MANAGER         // Gerente
  SUPERVISOR      // Supervisor
  STAFF           // Funcionário
  SPECIALIST      // Especialista
  RECEPTIONIST    // Recepcionista
  INTERN          // Estagiário
  VOLUNTEER       // Voluntário
  OTHER           // Outros
}
